# Auto-generated using compose2nix v0.3.2-pre.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };

  # Enable container name DNS for non-default Podman networks.
  # https://github.com/NixOS/nixpkgs/issues/226365
  networking.firewall.interfaces."podman+".allowedUDPPorts = [ 53 41641 ];

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."jellyfin-app" = {
    image = "jellyfin/jellyfin:2024122305";
    volumes = [
      "/backups/jellyfin/cache:/cache:rw"
      "/backups/jellyfin/config:/config:rw"
      "/backups/jellyfin/media:/media:rw"
      "/backups/jellyfin/media-series:/series:rw"
    ];
    dependsOn = [
      "ts-sidecar"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network=container:ts-sidecar"
    ];
  };
  systemd.services."podman-jellyfin-app" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    partOf = [
      "podman-compose-jellyfin-root.target"
    ];
    wantedBy = [
      "podman-compose-jellyfin-root.target"
    ];
  };
  virtualisation.oci-containers.containers."ts-sidecar" = {
    image = "tailscale/tailscale:v1.78.3";
    user = "root:root";
    environment = {
      "TS_AUTHKEY" = "tskey-client-khugSmNAZp11CNTRL-bZAPQQ7LPQdA8fSbmVNpLde8rrZ4QrAk?ephemeral=false";
      "TS_EXTRA_ARGS" = "--advertise-tags=tag:container";
      "TS_STATE_DIR" = "/var/lib/tailscale";
      "TS_TAILSCALED_EXTRA_ARGS" = "--port=41641";
      "TS_USERSPACE" = "false";
    };
    volumes = [
      "/backups/ts-sidecar/state:/var/lib/tailscale:rw"
      "/dev/net/tun:/dev/net/tun:rw"
    ];
    ports = [
      "41641:41641/udp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--cap-add=net_admin"
      "--privileged"
      "--cap-add=sys_module"
      "--network-alias=ts"
      "--network=jellyfin_default"
    ];
  };
  systemd.services."podman-ts-sidecar" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "podman-network-jellyfin_default.service"
    ];
    requires = [
      "podman-network-jellyfin_default.service"
    ];
    partOf = [
      "podman-compose-jellyfin-root.target"
    ];
    wantedBy = [
      "podman-compose-jellyfin-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-jellyfin_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f jellyfin_default";
    };
    script = ''
      podman network inspect jellyfin_default || podman network create jellyfin_default
    '';
    partOf = [ "podman-compose-jellyfin-root.target" ];
    wantedBy = [ "podman-compose-jellyfin-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-jellyfin-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
